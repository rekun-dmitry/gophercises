// Package Province provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Province defines model for Province.
type Province struct {
	AdminDev  *int      `json:"admin_dev,omitempty"`
	DipDev    *int      `json:"dip_dev,omitempty"`
	Id        *int      `json:"id,omitempty"`
	MilDev    *int      `json:"mil_dev,omitempty"`
	Modifiers *[]string `json:"modifiers,omitempty"`
	Name      *string   `json:"name,omitempty"`
	TradeGood *string   `json:"trade_good,omitempty"`
	TradeNode *string   `json:"trade_node,omitempty"`
}

// PostProvinceEconomicJSONBody defines parameters for PostProvinceEconomic.
type PostProvinceEconomicJSONBody struct {
	Text *string `json:"text,omitempty"`
}

// PostProvinceEconomicJSONRequestBody defines body for PostProvinceEconomic for application/json ContentType.
type PostProvinceEconomicJSONRequestBody PostProvinceEconomicJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProvinceEconomic request
	GetProvinceEconomic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProvinceEconomic request  with any body
	PostProvinceEconomicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProvinceEconomic(ctx context.Context, body PostProvinceEconomicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProvinceEconomicId request
	DeleteProvinceEconomicId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvinceEconomicId request
	GetProvinceEconomicId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProvinceEconomic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvinceEconomicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProvinceEconomicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvinceEconomicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProvinceEconomic(ctx context.Context, body PostProvinceEconomicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvinceEconomicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProvinceEconomicId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProvinceEconomicIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvinceEconomicId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvinceEconomicIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetProvinceEconomicRequest generates requests for GetProvinceEconomic
func NewGetProvinceEconomicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/province/economic/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProvinceEconomicRequest calls the generic PostProvinceEconomic builder with application/json body
func NewPostProvinceEconomicRequest(server string, body PostProvinceEconomicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProvinceEconomicRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProvinceEconomicRequestWithBody generates requests for PostProvinceEconomic with any type of body
func NewPostProvinceEconomicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/province/economic/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProvinceEconomicIdRequest generates requests for DeleteProvinceEconomicId
func NewDeleteProvinceEconomicIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/province/economic/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvinceEconomicIdRequest generates requests for GetProvinceEconomicId
func NewGetProvinceEconomicIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/province/economic/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetProvinceEconomic request
	GetProvinceEconomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProvinceEconomicResponse, error)

	// PostProvinceEconomic request  with any body
	PostProvinceEconomicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvinceEconomicResponse, error)

	PostProvinceEconomicWithResponse(ctx context.Context, body PostProvinceEconomicJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvinceEconomicResponse, error)

	// DeleteProvinceEconomicId request
	DeleteProvinceEconomicIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProvinceEconomicIdResponse, error)

	// GetProvinceEconomicId request
	GetProvinceEconomicIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetProvinceEconomicIdResponse, error)
}

type GetProvinceEconomicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Province
}

// Status returns HTTPResponse.Status
func (r GetProvinceEconomicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvinceEconomicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProvinceEconomicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r PostProvinceEconomicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProvinceEconomicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProvinceEconomicIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProvinceEconomicIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProvinceEconomicIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvinceEconomicIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Province
}

// Status returns HTTPResponse.Status
func (r GetProvinceEconomicIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvinceEconomicIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetProvinceEconomicWithResponse request returning *GetProvinceEconomicResponse
func (c *ClientWithResponses) GetProvinceEconomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProvinceEconomicResponse, error) {
	rsp, err := c.GetProvinceEconomic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvinceEconomicResponse(rsp)
}

// PostProvinceEconomicWithBodyWithResponse request with arbitrary body returning *PostProvinceEconomicResponse
func (c *ClientWithResponses) PostProvinceEconomicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvinceEconomicResponse, error) {
	rsp, err := c.PostProvinceEconomicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvinceEconomicResponse(rsp)
}

func (c *ClientWithResponses) PostProvinceEconomicWithResponse(ctx context.Context, body PostProvinceEconomicJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvinceEconomicResponse, error) {
	rsp, err := c.PostProvinceEconomic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvinceEconomicResponse(rsp)
}

// DeleteProvinceEconomicIdWithResponse request returning *DeleteProvinceEconomicIdResponse
func (c *ClientWithResponses) DeleteProvinceEconomicIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProvinceEconomicIdResponse, error) {
	rsp, err := c.DeleteProvinceEconomicId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProvinceEconomicIdResponse(rsp)
}

// GetProvinceEconomicIdWithResponse request returning *GetProvinceEconomicIdResponse
func (c *ClientWithResponses) GetProvinceEconomicIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetProvinceEconomicIdResponse, error) {
	rsp, err := c.GetProvinceEconomicId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvinceEconomicIdResponse(rsp)
}

// ParseGetProvinceEconomicResponse parses an HTTP response from a GetProvinceEconomicWithResponse call
func ParseGetProvinceEconomicResponse(rsp *http.Response) (*GetProvinceEconomicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProvinceEconomicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Province
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProvinceEconomicResponse parses an HTTP response from a PostProvinceEconomicWithResponse call
func ParsePostProvinceEconomicResponse(rsp *http.Response) (*PostProvinceEconomicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostProvinceEconomicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProvinceEconomicIdResponse parses an HTTP response from a DeleteProvinceEconomicIdWithResponse call
func ParseDeleteProvinceEconomicIdResponse(rsp *http.Response) (*DeleteProvinceEconomicIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteProvinceEconomicIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetProvinceEconomicIdResponse parses an HTTP response from a GetProvinceEconomicIdWithResponse call
func ParseGetProvinceEconomicIdResponse(rsp *http.Response) (*GetProvinceEconomicIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProvinceEconomicIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Province
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of all provinces
	// (GET /province/economic/)
	GetProvinceEconomic(ctx echo.Context) error
	// Create a province
	// (POST /province/economic/)
	PostProvinceEconomic(ctx echo.Context) error
	// Delete province with specific id
	// (DELETE /province/economic/{id})
	DeleteProvinceEconomicId(ctx echo.Context, id int) error
	// Get province with specific id
	// (GET /province/economic/{id})
	GetProvinceEconomicId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProvinceEconomic converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvinceEconomic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProvinceEconomic(ctx)
	return err
}

// PostProvinceEconomic converts echo context to params.
func (w *ServerInterfaceWrapper) PostProvinceEconomic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProvinceEconomic(ctx)
	return err
}

// DeleteProvinceEconomicId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvinceEconomicId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProvinceEconomicId(ctx, id)
	return err
}

// GetProvinceEconomicId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvinceEconomicId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProvinceEconomicId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/province/economic/", wrapper.GetProvinceEconomic)
	router.POST(baseURL+"/province/economic/", wrapper.PostProvinceEconomic)
	router.DELETE(baseURL+"/province/economic/:id", wrapper.DeleteProvinceEconomicId)
	router.GET(baseURL+"/province/economic/:id", wrapper.GetProvinceEconomicId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yUz27bMAzGX0XgdjRiZ9tJt20piuywFm1vQ1GoEhOzsP5MYrIFRd59kJy0deIWGXbZ",
	"ybZImeLv46dH0N4G79BxAvkISbdoVXm9jH5NTmN+D9EHjExYIspYcncG1/mDNwFBAjnGJUbYVmAovB4k",
	"M75uqXt9k/WGFoSxVCdGm17kJY7kljltt6BiVJv87ZTF8cSoDN4tvTdvhJ03Y7uf6/j7B9QM27xEbuFz",
	"ssGkIwUm70DCzcXsAipg4i5vuFY2dCiuzq5vRMK4xggVrDGmPns6aSZNru8DOhUIJHycNJMpVBAUt6Xn",
	"OuxUqVF75y3pOi8vkfMji6Ry7bkBCefIew3PdslQQcQUvEu9kh+aJj+0d4yu/EKF0JEuP6kfUj7XfigG",
	"7N9HXICEd/Xz+NS72amfBudIkkxqSOiz+HZ98V2UuPALsW9PzGepsE4ra1XcgIQr5FV0SSjRUeKcrLru",
	"aUPK1YJPIxwufRoH8XOFib94s/krBkMvMP7mk6dk2Pv+TIK9uEehjEGT37lFkdjHAvCf5Dp00vEZ5rMM",
	"UkdUjOYJ5gH5ryUs1DA+MoqPZLa9CzpkPFZiVtYPtZibMuFRWeTi8R9HPmrx5WRA9hvI4grY2zzfLL2o",
	"FNGA5LjC6gULS47syoKcVsdcbsdBv6LXL+JWLGmNTpARfbPmgFnf6vOpy54UUNOCtCCTtT3Vtf8voJMn",
	"8bT74g2PDJgfsD5Hfgt0SS7XbY9uFTuQ0DKHJOu681p1rU8sPzXNFLa32z8BAAD//7Pebf8UBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
